%{
/* Declarations section */

#include <cstdlib>
#include "hw3_output.hpp"

extern int yylex();
int yyerror(const char* message);

#define NewNode(attr, children) $$ = createNode(); $$->setAttributes(attr); $$->setChildren(children);
#define Cast(obj, Type) (std::static_pointer_cast<TYPE>(obj))
%}

// maybe delete this?
%code requires{
    #include "hw3_output.hpp"
}

%union {
    Node_Program* ProgramNode;
    Node_Token* NodeToken;
    Node_RetType* NodeRetType;
    Node_FormalDecl* NodeFormalDecl;
    Node_Override* NodeOverride;
    Node_Formals* NodeFormals;
    Node_FormalsList* NodeFormalsList;
    Node_FuncDecl* NodeFuncDecl;
    Node_FuncsList* NodeFuncsList;
    Node_Statement* NodeStatement;
    Node_StatementList* NodeStatementList;
    Node_Exp* NodeExp;
    Node_ExpList* NodeExpList;
    Node_Call* NodeCall;
};

//The %type declaration specifies the type of a *non-terminal*
//It defines the data type of the value that will be associated with a non-terminal during the parsing process
%type <ProgramNode> Program
%type <NodeFuncsList> Funcs
%type <NodeFuncDecl> FuncDecl
%type <NodeOverride> OverRide
%type <NodeRetType> RetType
%type <NodeFormalsList> FormalsList
%type <NodeFormals> Formals
%type <NodeFormalDecl> FormalDecl
%type <NodeStatement> Statements
%type <NodeStatement> Statement
%type <NodeExp> Type
%type <NodeCall> Call
%type <NodeExpList> ExpList
%type <NodeExp> Exp
%type <NodeExp> ExpBool
%type OpenScopeBlock
%type OpenScopeCont
%type CloseScope

%token <NodeToken> ID
%token <NodeToken> NUM
%token <NodeToken> STRING
%token <NodeToken> VOID
%token <NodeToken> INT
%token <NodeToken> BYTE
%token <NodeToken> B
%token <NodeToken> BOOL
%token <NodeToken> OVERRIDE
%token <NodeToken> TRUE
%token <NodeToken> FALSE
%token <NodeToken> RETURN

%token <NodeToken> WHILE
%token <NodeToken> BREAK
%token <NodeToken> CONTINUE
%token <NodeToken> SC
%token <NodeToken> COMMA



%right <NodeToken> LPAREN
%left <NodeToken> RPAREN
%right <NodeToken> ASSIGN

%nonassoc <NodeToken> IF
%nonassoc <NodeToken> ELSE


%left <NodeToken> OR
%left <NodeToken> AND
%left <NodeToken> EQUALITY
%left <NodeToken> RELOP
%left <NodeToken> BINOP_ADD
%left <NodeToken> BINOP_MUL
%right <NodeToken> NOT
%token <NodeToken> LBRACE
%token <NodeToken> RBRACE

// The %empty directive represents an empty production (a nullable production)
%%
    Program: Funcs                                                              {$$ = new Node_Program($1);output::printProductionRule(1);};
    Funcs: /*epsilon*/                                                          %empty {$$ = new Node_FuncsList({});output::printProductionRule(2);};
    Funcs: FuncDecl Funcs                                                       {$$ = new Node_FuncsList({$1,$2});output::printProductionRule(3);};



    FuncDecl: OverRide RetType ID LPAREN Formals RPAREN {Node_FuncDecl::newFuncFrame($1,$2,$3,$4,$5,$6);}  LBRACE Statements RBRACE  {$$ = new Node_FuncDecl($1,$2,$3,$4,$5,$6,$8,$9,$10);Frame_class::getInstance().closeFrame();output::printProductionRule(4);};
    OverRide: /*epsilon*/                                                          %empty {$$ = new Node_Override();output::printProductionRule(5);};
    OverRide: OVERRIDE                                                             {$$ = new Node_Override($1);output::printProductionRule(6);};



    RetType: Type                                                               {$$ = new Node_RetType({$1}, ($1)->type);output::printProductionRule(7);};
    RetType:  VOID                                                              {$$ = new Node_RetType({$1}, Type::VOID);output::printProductionRule(8);};
    Formals: /*epsilon*/                                                        %empty {$$ = new Node_Formals();output::printProductionRule(9);};
    Formals: FormalsList                                                        {$$ = new Node_Formals($1);output::printProductionRule(10);};
    FormalsList: FormalDecl                                                     {$$ = new Node_FormalsList($1);output::printProductionRule(11);};
    FormalsList: FormalDecl COMMA FormalsList                                   {$$ = new Node_FormalsList($1, $2, $3);output::printProductionRule(12);};
    FormalDecl: Type ID                                                         {$$ = new Node_FormalDecl($1, $2);output::printProductionRule(13);};
    Statements: Statement                                                       {$$ = new Node_Statement({$1});output::printProductionRule(14);};
    Statements: Statements Statement                                            {$$ = new Node_Statement({$1, $2});output::printProductionRule(15);};
    Statement: LBRACE OpenScopeBlock Statements RBRACE CloseScope               {$$ = new Node_Statement({$1, $3, $4});output::printProductionRule(16);};
    Statement: Type ID SC                                                       {output::printProductionRule(17);$$ = new Node_Statement_ID_Decl($1, $2, $3);};
    Statement: Type ID ASSIGN Exp SC                                            {output::printProductionRule(18);$$ = new Node_Statement_ID_Decl($1, $2, $3, $4, $5);};
    Statement: ID ASSIGN Exp SC                                                 {$$ = new Node_Statement_ID_Assign($1,$2,$3,$4);output::printProductionRule(19);};
    Statement: Call SC                                                          {$$ = new Node_Statement_Call($1,$2);output::printProductionRule(20);};
    Statement: RETURN SC                                                        {$$ = new Node_Statement_Ret($1,$2);output::printProductionRule(21);};
    Statement: RETURN Exp SC                                                    {$$ = new Node_Statement_Ret($1,$2,$3);output::printProductionRule(22);};
    Statement: IF LPAREN OpenScopeBlock ExpBool RPAREN Statement CloseScope %prec IF                          {$$ = new Node_Statement_IF($1,$2,$4,$5,$6);output::printProductionRule(23);};
    Statement: IF LPAREN OpenScopeBlock ExpBool RPAREN Statement CloseScope ELSE OpenScopeBlock Statement CloseScope                   {$$ = new Node_Statement_IF($1,$2,$4,$5,$6,$8,$10);output::printProductionRule(24);};
    Statement: WHILE LPAREN OpenScopeCont ExpBool RPAREN Statement CloseScope                               {$$ = new Node_Statement_While($1,$2,$4,$5,$6);output::printProductionRule(25);};
    Statement: BREAK SC                                                         {$$ = new Node_Statement_LoopMod($1,$2);output::printProductionRule(26);};
    Statement: CONTINUE SC                                                      {$$ = new Node_Statement_LoopMod($1,$2);output::printProductionRule(27);};
    Call: ID LPAREN ExpList RPAREN                                              {$$ = new Node_Call($1,$2,$3,$4);output::printProductionRule(28);};
    Call: ID LPAREN RPAREN                                                      {$$ = new Node_Call($1,$2,$3);output::printProductionRule(29);};
    ExpList: Exp                                                                {$$ = new Node_ExpList($1);output::printProductionRule(30);};
    ExpList: Exp COMMA ExpList                                                  {$$ = new Node_ExpList($1,$2,$3);output::printProductionRule(31);};
    Type: INT                                                                   {$$ = new Node_Exp_Type({$1}, Type::INT);output::printProductionRule(32);};
    Type: BYTE                                                                  {$$ = new Node_Exp_Type({$1}, Type::BYTE);output::printProductionRule(33);};
    Type: BOOL                                                                  {$$ = new Node_Exp_Type({$1}, Type::BOOL);output::printProductionRule(34);};
    Exp: LPAREN Exp RPAREN                                                      {$$ = new Node_Exp({$1,$2,$3},$2->type);output::printProductionRule(35);};
//Exp: Exp IF LPAREN Exp RPAREN ELSE Exp                                      {$$ = new Node_Exp_IfElse({$1,$2,$3,$4,$5,$6,$7});output::printProductionRule(36);};
    Exp: Exp BINOP_ADD Exp                                                      {$$ = new Node_Exp_Binop({$1,$2,$3});output::printProductionRule(36);};
    Exp: Exp BINOP_MUL Exp                                                      {$$ = new Node_Exp_Binop({$1,$2,$3});output::printProductionRule(36);};
    Exp: ID                                                                     {$$ = new Node_Exp_ID($1);output::printProductionRule(37);$$ = new Node_Exp_ID($1);};
    Exp: Call                                                                   {$$ = new Node_Exp_Call({$1});output::printProductionRule(38);};
    Exp: NUM                                                                    {$$ = new Node_Exp_NUM({$1}, Type::INT);output::printProductionRule(39);};
    Exp: NUM B                                                                  {$$ = new Node_Exp_NUM({$1}, Type::BYTE);output::printProductionRule(40);};
    Exp: STRING                                                                 {$$ = new Node_Exp_Str({$1});output::printProductionRule(41);};
    Exp: TRUE                                                                   {$$ = new Node_Exp_Bool($1);output::printProductionRule(42);};
    Exp: FALSE                                                                  {$$ = new Node_Exp_Bool($1);output::printProductionRule(43);};
    Exp: NOT Exp                                                                {$$ = new Node_Exp_Bool($1, $2);output::printProductionRule(44);};
    Exp: Exp AND Exp                                                            {$$ = new Node_Exp_Bool($1,$2,$3);output::printProductionRule(45);};
    Exp: Exp OR Exp                                                             {$$ = new Node_Exp_Bool($1,$2,$3);output::printProductionRule(46);};
    Exp: Exp RELOP Exp                                                          {$$ = new Node_Exp_Relop({$1,$2,$3});output::printProductionRule(47);};
    Exp: Exp EQUALITY Exp                                                       {$$ = new Node_Exp_Relop({$1,$2,$3});output::printProductionRule(47);};
    Exp: LPAREN Type RPAREN Exp %prec EQUALITY                                  {$$ = new Node_Exp_Cast({$1,$2,$3,$4});output::printProductionRule(48);};
    ExpBool: Exp                                                                {$$ = new Node_Exp_Bool($1);};

    OpenScopeBlock: /*epsilon*/                                                          %empty {Frame_class::getInstance().newFrame(FrameType::BLOCK);};
    OpenScopeCont: /*epsilon*/                                                          %empty {Frame_class::getInstance().newFrame(FrameType::LOOP);};
    CloseScope: /*epsilon*/                                                          %empty {Frame_class::getInstance().closeFrame();};
%%

int main(){
	int token;
	Frame_class::getInstance();
    
    try {
        while ((token = yyparse())) continue;
		
        if (Frame_class::getInstance().mainDeclared() == false){ // if 'main()' wasn't declared
            throw MainMissingExc();
        }
        Frame_class::getInstance().closeFrame();

    } catch (AppaException& exc) {
        exit(0);
    }
	
	return 0;
}

int yyerror(const char* message){
    output::errorSyn(yylineno);
    exit(0);
}
